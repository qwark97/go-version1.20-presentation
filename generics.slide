# Go 1.20
Introduction to the newest language version

Marcin Plata
24 March 2023

marcin.plata@softwaremind.com

:   * today we'll talk about the newest golang version which is go 1.20
:   * this presentation will be a bit shorter than usually but from time to time it should be refreshing to have a shorter meet up
:   * I hope that this talk will be a first one from a series that will go through a new golang versions each time when those are being released
:   * so let's get started

## Agenda
- Golang versioning overview
- Most interesting features of v1.20
- Other modifications

:   * firstly we'll talk about how the go language manages the versions
:   * we'll say what is the schedule and how the process looks like

:   * 
:   * then we'll talk about the most interesting - in my opinion - features that the go 1.20 brings to the table

:   *
:   * and at the end, we'll mention some other, less significant changes

:   * 
:   * in order to make it as useful as possible each important change will have some code examples
:   *

.image images/gopher.png 300 300

## But...
<br />
<br />
<br />
<br />
<br />
<br />
<br />


&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; HOW TO GET THE NEW VERSION?

:   * first things first
:   * for those less familiar with the Go short reminder how to get new version

## Short reminder

How to use newer version

Official instructions

:   * you can follow official guildline
:   * it's rather simple operation
:   * of course there are differents steps depending on the OS you're using
:   * just type "golang install" in google and it should be the first link

.image images/official_instructions.png 500 500


## Short reminder

How to use newer version

IDE support

:   * you can use IDE in order to help yourself to switch to another version
:   * for example in vs code, when you have a go file opened, you can click on version in the bottom left corner
:   * then the pop up will come up where you can click "Choose Go environment"
:   * and then, as you can see on the slide, you can download or choose already downloaded go version

.image images/ide_instructions.png 500 900

## Short reminder

How to use newer version

Docker image

:   * last but not least is the docker image
:   * it's convinient way to use different go versions
:   * although, in order to use it efficiently, probably some docker experience is needed

.image images/dockerhub.png 500 500

## Go versioning

:   * alright, we have the newest go version
:   * before we dive in into the interesting features 
:   * let's say a few words about the Go language releases policy
:   *
:   * the go team goal is to release the new major every six months 
:   * for the 3 months there is a stage of developing the features 
:   * then, for the next 3 months is the stage of "release freeze" when no new features are being added 
:   * the team then focuses on testing, polishing the features and fixing the bugs
:   *
:   * apart from that, life cycle of the version involves releasing some critical or security fixes
:   *
:   * the go team supports three latest versions with mentioned fixes
:   *
:   * some versions introduce more changes, some are less revolutionary
:   * for example version 1.18 was a big deal because it introduced the generics
:   * what is worth mentioning, all versions are backward compatible

.image images/policy.png 200 1000

## Go 1.20

<br />
<br />
<br />
<br />
<br />

* Multi errors
* "comparable" expansion
* Slice ---> list
* Context verbosity

:   * so, let's finally talk about the today's subject - the go version 1.20
:   * it has been released the first february, this year.
:   * it's rather less spectacular version
:   * but it doesn't mean it is not offering anything interesting
:   *
:   * the features of the newest Go version that I want to show you today are
:   * --- 1) Multi errors
:   * --- 2) Expansion of the comparable type
:   * --- 3) Possibility to transform slice to list
:   * --- 4) The increase in the context verbosity


## Multi errors

:   * first thing, multi errors
:   * we will switch to the code
:   * examples will help us to see what have changed
:   *
:   * first case, the old approach. In golang prior 1.20 we could create the error using fmt package
:   * but we could use only one "percent w" which means that the final error was in fact new error object
:   * this new error contained in the tree the error that used the "percent w" formatter
:   * therefore, as we can see in the assertion, only first one was correct
:   * the other errors were just messages in the newly created errors
:   * the types of those were lost, therefore for example comparition wasn't possible anymore
:   *
:   * the second posibility was to create, let's say, the tree of errors
:   * we could build hierarchy of errors and then unwrap it in the LIFO order
:   * the types of the errors inside this tree are not lost, but those errors are not on the same level
:   *
:   * what go 1.20 introduces is possibility to combine multiple errors in one, in a way that no error types will be lost in the process
:   * this is what we can see in the third example
:   * it looks very simillar as the first one, but here we are using the three "percent w" formatters
:   * thanks to that, as we can see in the assertion, 
:   * the truth is that the given error "IS" each and every of the errors that it has been created from
:   * the string representation of such combined error is also as expected
:   *
:   * the other possibility to create error that contains many errors is new function from "errors" package
:   * it is called "Join" and we can see it in the last example.
:   * from the types perspective it creates the same output as the approach with the "fmt" package
:   * although the string representation of the output is less human readable
:   * so I guess the better approach is to go with the "fmt" way of creating multiple errors on the same level
:   *
:   * whole this functionality can be very useful when we deal with processes that can fail in different places on the same time
:   * there are already external packages that provide this kind of functionality like e.g hashicorp/go-multierror
:   * but as from the go 1.20 this is a part of the language

## "comparable" expansion

:   * the next thing we'll talk about is expanding the "comparable" - let's say - keyword, or build in interface
:   * technically it's not a keyword, more like a predefined variable but whatever
:   * go 1.18 introduced the generics. I was talking about that on one of my previous presentations
:   * if anyone is interested and haven't seen that, I encourage to check it out
:   * anyways, with the generics, this "comparable" value has been introduced
:   * this is an interface that combines all types that are considered as a comparable: strings, bools, ints and so one
:   * what it did't include was the interface type, which from go perspective is valid comparable type 
:   * The go team wasn't sure if they wanted to include it because comparing two interfaces can cause the runtime panic
:   *
:   * as I mentioned, they really value the backward compatibility, so they didn't want to add the feature and allow people to rely on it
:   * and then remove the feature - it would breake the code
:   *
:   * for the go 1.20, they decided that yes, expanding the "comparable" key word with interface type is what we need
:   * therefore the go 1.20 does that
:   * 
:   * !!!EXAMPLE!!!
:   * in go 1.19 this code won't comple
:   * and in the go 1.20 this is perfectly valid 

## Slice ---> list

:   * the next thing is really short one but I think it might be quite usefull
:   * 
:   * in go, I think since always there was possibility to make a slice from a list
:   * the go 1.20 makes it easy to do the reverse operation
:   *
:   * let's see the code
:   *
:   * !!!RUN THE CODE WITH THE STDOUT!!!
:   * if we run it
:   * we can differentiate the slice and list
:   * 
:   * simple way to make a slice from list
:   * hacky way of creating the list from slice (I think it was possible since go 1.17)
:   * and finally, the method to change the slice to list introduced by go 1.20
:   *
:   * what is interesting, using the length smaller than slice length will cause that the result list will be cut
:   * on the other hand, using the lengh bigger than the actual slice length will cause panic
:   * so be carefull with that

## Context verbosity

:   * and last but not least - go 1.20 increases the context verbosity
:   *
:   * the context itself was introduced in go 1.7 so it was some time ago
:   * now context is widely used in the go code 
:   * and in my opinion it should be used everywhere where
:   * goroutines are in use or where some external operations are being performed e.g making requests, using db and so one
:   * 
:   * one of the most important functionality that context provides is the possibility to cancel some operations
:   * either through timeout or deliberetly by calling cancel function
:   *
:   * !!!TO THE CODE!!!
:   * 
:   * timeout case is straightforward but 
:   * until the go 1.20, it was hard to figure out **why** someone called the "cancel" function of the active context
:   * as we can see on the example, the error says only that the contex was cancelled
:   *
:   * the go 1.20 changes that by introducing the new function which is "WithCancelCause"
:   * it allows to pass to the cancel function the error, which can explain what is the reason behind cancelling the context
:   * to be able to retreive this error, we need to call another new thing, the "context.Cause" function
:   * someone could ask: "Why the heck they've done that this way?!. Why not to use the Err function as it was already there"
:   * well, it's all about the mentioned before, backward compatibility.
:   *
:   * as the context.Err has been always returning the conrete error types, if it would start to return some different errors it could possibly breake a lot of code
:   * therefore they decided to do this workaround with context.Cause function
:   *

## Other modifications

- random __math.Rand__
- defined order for array and strcuct fields
- new layout constants for time: **DateTime**, **DateOnly**, and **TimeOnly**
- ...

:   * there are many addtional changes that I haven't covered here
:   * as I said, this talk meant to be the short one, just to briefly describle the features of the go 1.20
:   *
:   * from other modifications that happened in this update are:
:   * math random is finally random by default, without explicite seeding
:   * The language specification now defines the exact order in which array elements and struct fields are compared
:   * new useful layots for time values, remember about that next time you will be parsing some date
:   * 
:   *
:   * and many more you can checkout in the the release notes under this link

see:

.link https://go.dev/doc/go1.20

## Next release?

:   * the next go version will be probably around an August
:   * now I really encourage you to update the go version in your projects,
:   * especially if you are using someting older than go 1.18
:   *
:   * and that's all what I've prepared for today
:   * thank you for your time, I hope you liked it
:   * if you have any questions feel free to ask now or later, either on guild chat or directly to me
:   * ...
:   * alright, so that's it for today, have a good Firday